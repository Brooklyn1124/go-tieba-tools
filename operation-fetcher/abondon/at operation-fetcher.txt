func oldVersion(taskFileName string, accountMap map[string]*Account, config *Config) {
	var 贴吧, err3 = inireader.ReadINI(taskFileName)
	if err3 != nil {
		oldlog.Loglog("读取设置文件失败:贴吧")
		oldlog.Loglog(err3.Error())

	}

	for key, value := range 贴吧 {

		if value["停用"] == "true" {
			oldlog.Loglog("根据\"贴吧.ini\"中的设置,跳过", key, "吧")
			continue
		}

		bt_pb := time.Now()
		oldlog.Loglog("开始统计", key, "吧")

		var bt, et time.Time

		var by, bm, bd int
		i, _ := fmt.Sscanf(value["开始时间"], "%d-%d-%d", &by, &bm, &bd)
		if i != 3 {
			if value["开始时间"] == "" {
				oldlog.Loglog("开始时间省缺,使用1970-1-1")
			} else {
				oldlog.Loglog("开始时间输入格式有误,使用1970-1-1")
				oldlog.Loglog(value["开始时间"])
			}

			bt = time.Date(1970, 1, 1, 0, 0, 0, 0, time.Local)
		} else {
			bt = time.Date(by, time.Month(bm), bd, 0, 0, 0, 0, time.Local)
		}
		oldlog.Loglog("开始时间:", bt.String())

		var ey, em, ed int
		j, _ := fmt.Sscanf(value["结束时间"], "%d-%d-%d", &ey, &em, &ed)
		if j != 3 {
			if value["结束时间"] == "" {
				oldlog.Loglog("结束时间省缺,使用昨天的日期")
			} else {
				oldlog.Loglog("结束时间输入格式有误,使用昨天的日期")
				oldlog.Loglog(value["结束时间"])
			}
			tn := time.Now()
			et = time.Date(tn.Year(), tn.Month(), tn.Day(), 0, 0, 0, 0, time.Local)
		} else {
			et = time.Date(ey, time.Month(em), ed, 0, 0, 0, 0, time.Local)
		}
		oldlog.Loglog("结束时间:", et.String())

		whitelist := make(map[string]bool)
		aaaa := value["白名"]
		oldlog.Loglog(key, "吧吧务白名:", aaaa)
		for _, white := range strings.Split(aaaa, ",") {
			whitelist[strings.ToLower(white)] = true
		}

		所需账号字符串 := value["账号"]
		针对 := value["针对"]
		var BDUSS string
		var _bawulist []old.Bawu
		var 所需账号切片 []string

		所需账号切片 = strings.Split(所需账号字符串, ",")
		for _, 账号 := range 所需账号切片 {
			if BDUSS = accountMap[账号].BDUSS; BDUSS != "" {
				oldlog.Loglog("尝试通过账号", 账号, "获取", key, "吧吧务名单,并测试能否访问吧务后台")
				_bawulist = old.GetBawuList(BDUSS, key, whitelist)
				if len(_bawulist) == 0 {
					oldlog.Loglog(账号, "未能获取", key, "吧吧务名单,无法访问吧务后台,放弃")
					continue
				}
				oldlog.Loglog(账号, "成功获取", key, "吧吧务名单,可以访问吧务后台")

				if 针对 != "" {
					oldlog.Loglog("已设置针对的吧务,仅对针对的吧务进行统计")
					针对切片 := strings.Split(针对, ",")
					oldlog.Loglog("针对:", 针对)
					__bawulist := old.GetBawuList_C(针对切片)

					for i, __bawu := range __bawulist {
						find := false
						for _, _bawu := range _bawulist {
							if strings.ToLower(_bawu.Username) == strings.ToLower(__bawu.Username) {
								__bawulist[i] = _bawu
								find = true
							}
						}
						if !find {
							oldlog.Loglog("注意:吧务", __bawu.Username, "已经离开吧务团队.其文件名(大小写相关)将依据设置文件中的设置取名")
						}
					}
					_bawulist = __bawulist

				}
				var 杂项切片 []string
				if 杂项 := value["杂项"]; 杂项 != "" {
					oldlog.Loglog("已设置统计杂项")
					oldlog.Loglog("杂项:", 杂项)
					杂项切片 = strings.Split(杂项, ",")
				}

				var 整体比较 bool
				var 整体比较标准线 int = 100
				var zwl = value["整体比较白名"]
				var zwlm map[string]bool
				if value["整体比较"] == "true" {
					oldlog.Loglog("已开启整体比较")
					整体比较 = true

					if z := value["整体比较标准线"]; z != "" {
						oldlog.Loglog("已设置整体比较")
						if 标准线, err := strconv.Atoi(value["整体比较标准线"]); err != nil {
							oldlog.Loglog("整体比较输入格式有误,使用", 100)
						} else {
							整体比较标准线 = 标准线
						}
					}

					oldlog.Loglog(key, "吧整体比较白名:", zwl)
					if zwls := strings.Split(zwl, ","); len(zwls) != 0 {
						zwlm = make(map[string]bool)
						for _, white := range zwls {
							zwlm[strings.ToLower(white)] = true
						}
					}
				}

				old.Do(BDUSS, key, _bawulist, 杂项切片, 整体比较, 整体比较标准线, zwlm, &bt, &et,
					config.Thread.ScanGoroutineNumber, config.Thread.AnalyseGoroutineNumberPerScanGorountine)
				break
			}
		}

		if len(_bawulist) == 0 {
			oldlog.Loglog("跳过", key, "吧.没有账号能够访问吧务后台")
			continue
		}

		oldlog.Loglog("完成统计", key, "吧", "用时", time.Now().Sub(bt_pb).String())

	}

}